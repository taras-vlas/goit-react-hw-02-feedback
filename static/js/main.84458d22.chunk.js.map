{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positiveFeedbackPercentage","useStyles","createUseStyles","buttons","display","button","margin","backgroundColor","FeedbackOptions","todos","onLeaveFeedback","classes","className","map","todo","type","name","onClick","toUpperCase","slice","nanoid","Section","title","children","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","event","target","setState","prevState","objectKey","Object","keys","this","console","log","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAuBeA,EApBI,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAAMC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,2BAChD,OACC,qCACC,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,oDAAuBC,EAAvB,W,gBCNKC,EAAYC,YAAgB,CACjCC,QAAS,CACRC,QAAS,QAEVC,OAAQ,CACPC,OAAQ,EACR,UAAW,CACXC,gBAAiB,WAuBNC,EAlBS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC1BC,EAAUV,IACjB,OACC,qBAAKW,UAAWD,EAAQR,QAAxB,SACEM,EAAMI,KAAI,SAACC,GAAD,OACV,wBAAuBC,KAAK,SAASC,KAAMF,EAAMG,QAASP,EAAiBE,UAAWD,EAAQN,OAA9F,SACES,EAAK,GAAGI,cAAgBJ,EAAKK,MAAM,IADxBC,qBCPFC,EAZC,SAAC,GAA4B,IAAD,IAAzBC,aAAyB,MAAnB,GAAmB,EAAfC,EAAe,EAAfA,SAC5B,OACC,qCACC,6BAAKD,IACJC,MCOWC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACC,mCACC,4BAAIA,OC0DQC,G,iNAxDdC,MAAQ,CACH/B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIT8B,mBAAqB,WAAO,IAAD,EACM,EAAKD,MACpC,OAFyB,EACjB/B,KADiB,EACXC,QADW,EACFC,K,EAIzB+B,gCAAkC,WAAO,IAEjC7B,EAAqC,IAD1B,EAAK2B,MAAd/B,KAC0C,EAAKgC,qBAEvD,OAAOE,KAAKC,MAAM/B,I,EAIpBU,gBAAkB,SAACsB,GACf,IAAMhB,EAAOgB,EAAMC,OAAOjB,KAC1B,EAAKkB,UAAS,SAACC,GAAD,sBACXnB,EAAOmB,EAAUnB,GAAQ,O,4CAKhC,WACE,IAAMoB,EAAYC,OAAOC,KAAKC,KAAKZ,OAD5B,EAGwBY,KAAKZ,MAA5B/B,EAHD,EAGCA,KAAMC,EAHP,EAGOA,QAASC,EAHhB,EAGgBA,IACjBC,EAAQwC,KAAKX,qBACb5B,EAA6BuC,KAAKV,kCAEtC,OADEW,QAAQC,IAAI,OAAQzC,EAA4B8B,KAAKC,MAAM/B,IAE3D,qCACE,cAAC,EAAD,CAASsB,MAAM,0BACf,cAAC,EAAD,CAAiBb,MAAO2B,EAAW1B,gBAAiB6B,KAAK7B,kBACzD,cAAC,EAAD,CAASY,MAAM,eAEJ,IAAVvB,EACI,cAAC,EAAD,CAAc0B,QAAQ,sBACtB,cAAC,EAAD,CACG7B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,2BAA4BA,W,GAjD5B0C,c,MCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.84458d22.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n//<Statistics good={} neutral={} bad={} total={} positivePercentage={}></Statistics>\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedbackPercentage }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>Good:  {good}</p>\r\n\t\t\t<p>Neutral:  {neutral}</p>\r\n\t\t\t<p>Bad:  {bad}</p>\r\n\t\t\t<p>Total:  {total}</p>\r\n\t\t\t<p>Positive feedback: {positiveFeedbackPercentage}%</p>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tgood: PropTypes.number.isRequired,\r\n\tneutral: PropTypes.number.isRequired,\r\n\tbad: PropTypes.number.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositiveFeedbackPercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;\r\n","import { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\n\t\timport { createUseStyles } from 'react-jss';\r\n\r\n\t\tconst useStyles = createUseStyles({\r\n\t\t\tbuttons: {\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t},\r\n\t\t\tbutton: {\r\n\t\t\t\tmargin: 5,\r\n\t\t\t\t'&:hover': {\r\n\t\t\t\tbackgroundColor: 'blue',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\nconst FeedbackOptions = ({ todos, onLeaveFeedback }) => {\r\n\t const classes = useStyles();\r\n\treturn (\r\n\t\t<div className={classes.buttons}>\r\n\t\t\t{todos.map((todo) => (\r\n\t\t\t\t<button key={nanoid()} type=\"button\" name={todo} onClick={onLeaveFeedback} className={classes.button}>\r\n\t\t\t\t\t{todo[0].toUpperCase() + todo.slice(1)}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\ttodos: PropTypes.array.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title=\"\", children }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n};\r\nexport default Section;\r\n\r\n","\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{message}</p>\r\n\t\t</>\r\n\t);\r\n};\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\nimport './styles.css';\n\nclass App extends Component {\n\tstate = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n\t};\n\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return ( good + neutral + bad );\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const positiveFeedbackPercentage = (good * 100) / this.countTotalFeedback();\n      //  console.log('%: ', positiveFeedbackPercentage, Math.round(positiveFeedbackPercentage));\n    return Math.round(positiveFeedbackPercentage);\n  };\n\n\n  onLeaveFeedback = (event) => {\n      const name = event.target.name;\n      this.setState((prevState) => ({\n        [name]: prevState[name] + 1\n      }));\n    };\n\n  \n  render() {\n    const objectKey = Object.keys(this.state);\n\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage();\n        console.log('C%: ', positiveFeedbackPercentage, Math.round(positiveFeedbackPercentage));\n      return (\n        <>           \n          <Section title=\"Please leave feedback\" />\n          <FeedbackOptions todos={objectKey} onLeaveFeedback={this.onLeaveFeedback} />\n          <Section title=\"Statistics\" />\n          \n          {total === 0\n            ? (<Notification message=\"No feedback given\" />)\n            : (<Statistics\n                  good={good}\n                  neutral={neutral}\n                  bad={bad}\n                  total={total}\n                  positiveFeedbackPercentage={positiveFeedbackPercentage}\n                />\n          )}\n        </>\n    );\n  };\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css'; // npm install modern-normalize\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}